start      : expression*
?expression: block
           | group
           | statement
           | function_call
           | function_definition
           | operation
           | assignment
           | literal
           | identifier
?block     : "{" expression* "}"
?group     : "(" expression~1 ")"
?statement : if_ | for_ | while_ | return_
if_        : "if" expression~1 block ("else" "if" expression~1 block)* ["else" block]
for_       : "for" identifier "in" expression~1 block
while_     : "while" expression~1 block
return_    : "return" [expression~1]

function_definition             : "(" function_definition_arguments? ")" [function_definition_return_type] "=>" block
function_definition_return_type : ":" type
function_definition_arguments   : (type identifier ["=" expression]) ("," (type identifier ["=" expression]))*
function_call                   : identifier "(" function_call_arguments? ")"
function_call_arguments         : (expression | identifier "=" expression) ("," (expression | identifier "=" expression))*

operation  : _unary | _binary
assignment : _assign
_unary     : (/~/ | /!/ | /not/) expression
_binary    : expression operator expression
_assign    : type identifier "<-" expression~1
!operator  : "^"
           | ("*" | "/" | "%")
           | ("+" | "-")
           | ("<<" | ">>")
           | ("<" | "<=" | ">" | ">=")
           | ("is" | "==" | "!=")
           | "&"
           | "^^"
           | "|"
           | "and"
           | "or"
type       : "int"  -> integer
           | "dec"  -> decimal
           | "bool" -> boolean
           | "str"  -> string
           | "raw"  -> raw
           | "func" -> function
literal    : LITERAL_STRING -> lstring
           | LITERAL_NUMBER -> lnumber
           | LITERAL_BYTES  -> lraw
           | ("true" | "false") -> lboolean
           | "[" expression ("," expression)* "]" -> lvec
identifier : IDENTIFIER

COMMENT           : "#" /[^\n]*/ "\n"
MULTILINE_COMMENT : /(?s)(#>>).*?(<<#(\n|\Z))/
LITERAL_BYTES     : "0x" /[0-9a-fA-F]+/

%import common.CNAME          -> IDENTIFIER
%import common.ESCAPED_STRING -> LITERAL_STRING
%import common.SIGNED_NUMBER  -> LITERAL_NUMBER
%import common.WS

%ignore WS
%ignore COMMENT
%ignore MULTILINE_COMMENT