# a function
fib => (int x) : int {
    if x < 3 {
        # Needs a starting value
        return 1
    } else {
        #>>
        Fibonacci is a recursive function,
        so it calls itself to continue
        <<#
        return fib(x - 1) + fib(x - 2)
    }
} # end fib

# a procedure
shout => (str x, ) {
    print(x)
}

printer => (str name, int start: 0) {
    for i in start:10 {
        print(name)
        print(i)
    }
}

fib(40)

#>>
function expr:

<identifier> => (<type> <identifier>, ...) [: <return-type>] {
    <expr>
}
<<#